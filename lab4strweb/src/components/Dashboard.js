import React, { useContext, useEffect, useState } from 'react';
import { AuthContext } from '../context/AuthContext';
import moment from 'moment-timezone'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
import '../css/Dashboard.css';
import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';

const Dashboard = () => {
  const { isAuthenticated, user } = useContext(AuthContext);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [weather, setWeather] = useState(null);
  const [cars, setCars] = useState([]);
  const [loadingCars, setLoadingCars] = useState(true);
  const [currentDate, setCurrentDate] = useState(null);
  const [userTimezone, setUserTimezone] = useState(moment.tz.guess()); // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [userCoordinates, setUserCoordinates] = useState(null); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [userCreatedAt, setUserCreatedAt] = useState(null);
  const [userUpdatedAt, setUserUpdatedAt] = useState(null);

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞
  const location = { lat: 53.9006, lng: 27.5590 }; // –ü—Ä–∏–º–µ—Ä –¥–ª—è –ú–∏–Ω—Å–∫–∞

  // API-–∫–ª—é—á–∏
  const WEATHER_API_KEY = '6ade661e6cd3047f64985d231e80726d';
  const RAPIDAPI_KEY = '637e77c33dmsh69352e84f828ae9p1156b3jsna7d3cce1e7de';

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getGeolocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserCoordinates({ lat: latitude, lng: longitude });
          fetchWeather(latitude, longitude); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
          // alert(`–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –®–∏—Ä–æ—Ç–∞: ${latitude}, –î–æ–ª–≥–æ—Ç–∞: ${longitude}`);
        },
        (error) => {
          alert(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
        }
      );
    } else {
      alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.');
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
  const fetchWeather = async (lat, lon) => {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${WEATHER_API_KEY}`
      );
      const data = await response.json();
      setWeather(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–≥–æ–¥—ã:', error);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  const fetchCars = async () => {
    try {
      const response = await fetch('https://cars-by-api-ninjas.p.rapidapi.com/v1/cars?model=corolla', {
        method: 'GET',
        headers: {
          'X-RapidAPI-Host': 'cars-by-api-ninjas.p.rapidapi.com',
          'X-RapidAPI-Key': RAPIDAPI_KEY,
        },
      });
      const data = await response.json();
      setCars(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
    } finally {
      setLoadingCars(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
  const fetchUserDates = async () => {
    if (!user || !user._id) {
      console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
  
    try {
      const response = await fetch(`/api/users/${user._id}`);
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
      const data = await response.json();
      if (data.createdAt && data.updatedAt) {
        setUserCreatedAt(data.createdAt);
        setUserUpdatedAt(data.updatedAt);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };
  
  useEffect(() => {
    if (user && user._id) {
      fetchUserDates();
    }
  }, [user]);
  

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const getCurrentDate = () => {
    const date = new Date();
    setCurrentDate(date);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchWeather(location.lat, location.lng);
    fetchCars();
    fetchUserDates();
    getCurrentDate();
    getGeolocation(); // –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  }, []);

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ UTC
  const formatDate = (date, timezone) => {
    return moment(date).tz(timezone).format('YYYY-MM-DD HH:mm:ss');
  };

  const formatUTC = (date) => {
    return moment(date).utc().format('YYYY-MM-DD HH:mm:ss');
  };

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!isAuthenticated || !user) {
    return (
      <div className="dashboard-page">
        <div className="login-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.</div>
      </div>
    );
  }

  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  return (
    <div className="dashboard-page">
      <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!</h1>
      <p>–≠—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</p>

      {/* –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {currentDate && (
        <div className="current-date">
          <p>
            –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–≤ –≤–∞—à–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ - {userTimezone}): {formatDate(currentDate, userTimezone)}
          </p>
          <p>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–≤ UTC): {formatUTC(currentDate)}</p>
        </div>
      )}

      {/* –ö–∞—Ä—Ç–∞ Google */}
      <div className="map-container">
        <LoadScript googleMapsApiKey="">
          <GoogleMap
            mapContainerStyle={{ width: '100%', height: '100%' }}
            center={userCoordinates || location} // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            zoom={15}
          >
            <Marker position={userCoordinates || location} /> {/* –ú–∞—Ä–∫–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */}
          </GoogleMap>
        </LoadScript>
      </div>

      {/* –ü–æ–≥–æ–¥–∞ */}
      <div className="weather">
        {weather ? (
          <div className="weather-info">
            <h2>–ü–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ:</h2>
            <p>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <strong>{weather.main.temp}¬∞C</strong></p>
            <p>‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: <strong>{weather.weather[0].description}</strong></p>
            <p>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <strong>{weather.main.humidity}%</strong></p>
            <p>üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <strong>{weather.wind.speed} –º/—Å</strong></p>
          </div>
        ) : (
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ...</p>
        )}
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π */}
      <div className="cars">
        <h2>–ú–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:</h2>
        {loadingCars ? (
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...</p>
        ) : cars.length > 0 ? (
          <ul className="car-list">
            {cars.map((car, index) => (
              <li key={index} className="car-item">
                <strong>{car.make} {car.model}</strong> ({car.year})
              </li>
            ))}
          </ul>
        ) : (
          <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö.</p>
        )}
      </div>

      {/* –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */}
      <div className="data-dates">
        {userCreatedAt && (
          <>
            <p>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ –≤–∞—à–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ): {formatDate(userCreatedAt, userTimezone)}</p>
            <p>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ UTC): {formatUTC(userCreatedAt)}</p>
          </>
        )}
        {userUpdatedAt && (
          <>
            <p>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ –≤–∞—à–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ): {formatDate(userUpdatedAt, userTimezone)}</p>
            <p>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ UTC): {formatUTC(userUpdatedAt)}</p>
          </>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
